/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@notionhq/client/build/src/Client.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/Client.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Client_auth, _Client_logLevel, _Client_logger, _Client_prefixUrl, _Client_timeoutMs, _Client_notionVersion, _Client_fetch, _Client_agent, _Client_userAgent;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst logging_1 = __webpack_require__(/*! ./logging */ \"./node_modules/@notionhq/client/build/src/logging.js\");\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@notionhq/client/build/src/errors.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@notionhq/client/build/src/utils.js\");\nconst api_endpoints_1 = __webpack_require__(/*! ./api-endpoints */ \"./node_modules/@notionhq/client/build/src/api-endpoints.js\");\nconst node_fetch_1 = __webpack_require__(/*! node-fetch */ \"./node_modules/node-fetch/browser.js\");\nconst package_json_1 = __webpack_require__(/*! ../package.json */ \"./node_modules/@notionhq/client/build/package.json\");\nclass Client {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f;\n        _Client_auth.set(this, void 0);\n        _Client_logLevel.set(this, void 0);\n        _Client_logger.set(this, void 0);\n        _Client_prefixUrl.set(this, void 0);\n        _Client_timeoutMs.set(this, void 0);\n        _Client_notionVersion.set(this, void 0);\n        _Client_fetch.set(this, void 0);\n        _Client_agent.set(this, void 0);\n        _Client_userAgent.set(this, void 0);\n        /*\n         * Notion API endpoints\n         */\n        this.blocks = {\n            /**\n             * Retrieve block\n             */\n            retrieve: (args) => {\n                return this.request({\n                    path: api_endpoints_1.getBlock.path(args),\n                    method: api_endpoints_1.getBlock.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getBlock.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getBlock.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Update block\n             */\n            update: (args) => {\n                return this.request({\n                    path: api_endpoints_1.updateBlock.path(args),\n                    method: api_endpoints_1.updateBlock.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.updateBlock.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.updateBlock.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Delete block\n             */\n            delete: (args) => {\n                return this.request({\n                    path: api_endpoints_1.deleteBlock.path(args),\n                    method: api_endpoints_1.deleteBlock.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.deleteBlock.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.deleteBlock.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            children: {\n                /**\n                 * Append block children\n                 */\n                append: (args) => {\n                    return this.request({\n                        path: api_endpoints_1.appendBlockChildren.path(args),\n                        method: api_endpoints_1.appendBlockChildren.method,\n                        query: (0, utils_1.pick)(args, api_endpoints_1.appendBlockChildren.queryParams),\n                        body: (0, utils_1.pick)(args, api_endpoints_1.appendBlockChildren.bodyParams),\n                        auth: args === null || args === void 0 ? void 0 : args.auth,\n                    });\n                },\n                /**\n                 * Retrieve block children\n                 */\n                list: (args) => {\n                    return this.request({\n                        path: api_endpoints_1.listBlockChildren.path(args),\n                        method: api_endpoints_1.listBlockChildren.method,\n                        query: (0, utils_1.pick)(args, api_endpoints_1.listBlockChildren.queryParams),\n                        body: (0, utils_1.pick)(args, api_endpoints_1.listBlockChildren.bodyParams),\n                        auth: args === null || args === void 0 ? void 0 : args.auth,\n                    });\n                },\n            },\n        };\n        this.databases = {\n            /**\n             * List databases\n             *\n             * @deprecated Please use `search`\n             */\n            list: (args) => {\n                return this.request({\n                    path: api_endpoints_1.listDatabases.path(),\n                    method: api_endpoints_1.listDatabases.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.listDatabases.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.listDatabases.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Retrieve a database\n             */\n            retrieve: (args) => {\n                return this.request({\n                    path: api_endpoints_1.getDatabase.path(args),\n                    method: api_endpoints_1.getDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Query a database\n             */\n            query: (args) => {\n                return this.request({\n                    path: api_endpoints_1.queryDatabase.path(args),\n                    method: api_endpoints_1.queryDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.queryDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.queryDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Create a database\n             */\n            create: (args) => {\n                return this.request({\n                    path: api_endpoints_1.createDatabase.path(),\n                    method: api_endpoints_1.createDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.createDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.createDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Update a database\n             */\n            update: (args) => {\n                return this.request({\n                    path: api_endpoints_1.updateDatabase.path(args),\n                    method: api_endpoints_1.updateDatabase.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.updateDatabase.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.updateDatabase.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n        };\n        this.pages = {\n            /**\n             * Create a page\n             */\n            create: (args) => {\n                return this.request({\n                    path: api_endpoints_1.createPage.path(),\n                    method: api_endpoints_1.createPage.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.createPage.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.createPage.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Retrieve a page\n             */\n            retrieve: (args) => {\n                return this.request({\n                    path: api_endpoints_1.getPage.path(args),\n                    method: api_endpoints_1.getPage.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getPage.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getPage.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Update page properties\n             */\n            update: (args) => {\n                return this.request({\n                    path: api_endpoints_1.updatePage.path(args),\n                    method: api_endpoints_1.updatePage.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.updatePage.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.updatePage.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            properties: {\n                /**\n                 * Retrieve page property\n                 */\n                retrieve: (args) => {\n                    return this.request({\n                        path: api_endpoints_1.getPageProperty.path(args),\n                        method: api_endpoints_1.getPageProperty.method,\n                        query: (0, utils_1.pick)(args, api_endpoints_1.getPageProperty.queryParams),\n                        body: (0, utils_1.pick)(args, api_endpoints_1.getPageProperty.bodyParams),\n                        auth: args === null || args === void 0 ? void 0 : args.auth,\n                    });\n                },\n            },\n        };\n        this.users = {\n            /**\n             * Retrieve a user\n             */\n            retrieve: (args) => {\n                return this.request({\n                    path: api_endpoints_1.getUser.path(args),\n                    method: api_endpoints_1.getUser.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getUser.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getUser.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * List all users\n             */\n            list: (args) => {\n                return this.request({\n                    path: api_endpoints_1.listUsers.path(),\n                    method: api_endpoints_1.listUsers.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.listUsers.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.listUsers.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * Get details about bot\n             */\n            me: (args) => {\n                return this.request({\n                    path: api_endpoints_1.getSelf.path(),\n                    method: api_endpoints_1.getSelf.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.getSelf.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.getSelf.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n        };\n        this.comments = {\n            /**\n             * Create a comment\n             */\n            create: (args) => {\n                return this.request({\n                    path: api_endpoints_1.createComment.path(),\n                    method: api_endpoints_1.createComment.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.createComment.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.createComment.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n            /**\n             * List comments\n             */\n            list: (args) => {\n                return this.request({\n                    path: api_endpoints_1.listComments.path(),\n                    method: api_endpoints_1.listComments.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.listComments.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.listComments.bodyParams),\n                    auth: args === null || args === void 0 ? void 0 : args.auth,\n                });\n            },\n        };\n        /**\n         * Search\n         */\n        this.search = (args) => {\n            return this.request({\n                path: api_endpoints_1.search.path(),\n                method: api_endpoints_1.search.method,\n                query: (0, utils_1.pick)(args, api_endpoints_1.search.queryParams),\n                body: (0, utils_1.pick)(args, api_endpoints_1.search.bodyParams),\n                auth: args === null || args === void 0 ? void 0 : args.auth,\n            });\n        };\n        this.oauth = {\n            /**\n             * Get token\n             */\n            token: (args) => {\n                return this.request({\n                    path: api_endpoints_1.oauthToken.path(),\n                    method: api_endpoints_1.oauthToken.method,\n                    query: (0, utils_1.pick)(args, api_endpoints_1.oauthToken.queryParams),\n                    body: (0, utils_1.pick)(args, api_endpoints_1.oauthToken.bodyParams),\n                    auth: {\n                        client_id: args.client_id,\n                        client_secret: args.client_secret,\n                    },\n                });\n            },\n        };\n        __classPrivateFieldSet(this, _Client_auth, options === null || options === void 0 ? void 0 : options.auth, \"f\");\n        __classPrivateFieldSet(this, _Client_logLevel, (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : logging_1.LogLevel.WARN, \"f\");\n        __classPrivateFieldSet(this, _Client_logger, (_b = options === null || options === void 0 ? void 0 : options.logger) !== null && _b !== void 0 ? _b : (0, logging_1.makeConsoleLogger)(package_json_1.name), \"f\");\n        __classPrivateFieldSet(this, _Client_prefixUrl, ((_c = options === null || options === void 0 ? void 0 : options.baseUrl) !== null && _c !== void 0 ? _c : \"https://api.notion.com\") + \"/v1/\", \"f\");\n        __classPrivateFieldSet(this, _Client_timeoutMs, (_d = options === null || options === void 0 ? void 0 : options.timeoutMs) !== null && _d !== void 0 ? _d : 60000, \"f\");\n        __classPrivateFieldSet(this, _Client_notionVersion, (_e = options === null || options === void 0 ? void 0 : options.notionVersion) !== null && _e !== void 0 ? _e : Client.defaultNotionVersion, \"f\");\n        __classPrivateFieldSet(this, _Client_fetch, (_f = options === null || options === void 0 ? void 0 : options.fetch) !== null && _f !== void 0 ? _f : node_fetch_1.default, \"f\");\n        __classPrivateFieldSet(this, _Client_agent, options === null || options === void 0 ? void 0 : options.agent, \"f\");\n        __classPrivateFieldSet(this, _Client_userAgent, `notionhq-client/${package_json_1.version}`, \"f\");\n    }\n    /**\n     * Sends a request.\n     *\n     * @param path\n     * @param method\n     * @param query\n     * @param body\n     * @returns\n     */\n    async request({ path, method, query, body, auth, }) {\n        this.log(logging_1.LogLevel.INFO, \"request start\", { method, path });\n        // If the body is empty, don't send the body in the HTTP request\n        const bodyAsJsonString = !body || Object.entries(body).length === 0\n            ? undefined\n            : JSON.stringify(body);\n        const url = new URL(`${__classPrivateFieldGet(this, _Client_prefixUrl, \"f\")}${path}`);\n        if (query) {\n            for (const [key, value] of Object.entries(query)) {\n                if (value !== undefined) {\n                    if (Array.isArray(value)) {\n                        value.forEach(val => url.searchParams.append(key, decodeURIComponent(val)));\n                    }\n                    else {\n                        url.searchParams.append(key, String(value));\n                    }\n                }\n            }\n        }\n        // Allow both client ID / client secret based auth as well as token based auth.\n        let authorizationHeader;\n        if (typeof auth === \"object\") {\n            // Client ID and secret based auth is **ONLY** supported when using the\n            // `/oauth/token` endpoint. If this is the case, handle formatting the\n            // authorization header as required by `Basic` auth.\n            const unencodedCredential = `${auth.client_id}:${auth.client_secret}`;\n            const encodedCredential = Buffer.from(unencodedCredential).toString(\"base64\");\n            authorizationHeader = { authorization: `Basic ${encodedCredential}` };\n        }\n        else {\n            // Otherwise format authorization header as `Bearer` token auth.\n            authorizationHeader = this.authAsHeaders(auth);\n        }\n        const headers = {\n            ...authorizationHeader,\n            \"Notion-Version\": __classPrivateFieldGet(this, _Client_notionVersion, \"f\"),\n            \"user-agent\": __classPrivateFieldGet(this, _Client_userAgent, \"f\"),\n        };\n        if (bodyAsJsonString !== undefined) {\n            headers[\"content-type\"] = \"application/json\";\n        }\n        try {\n            const response = await errors_1.RequestTimeoutError.rejectAfterTimeout(__classPrivateFieldGet(this, _Client_fetch, \"f\").call(this, url.toString(), {\n                method: method.toUpperCase(),\n                headers,\n                body: bodyAsJsonString,\n                agent: __classPrivateFieldGet(this, _Client_agent, \"f\"),\n            }), __classPrivateFieldGet(this, _Client_timeoutMs, \"f\"));\n            const responseText = await response.text();\n            if (!response.ok) {\n                throw (0, errors_1.buildRequestError)(response, responseText);\n            }\n            const responseJson = JSON.parse(responseText);\n            this.log(logging_1.LogLevel.INFO, `request success`, { method, path });\n            return responseJson;\n        }\n        catch (error) {\n            if (!(0, errors_1.isNotionClientError)(error)) {\n                throw error;\n            }\n            // Log the error if it's one of our known error types\n            this.log(logging_1.LogLevel.WARN, `request fail`, {\n                code: error.code,\n                message: error.message,\n            });\n            if ((0, errors_1.isHTTPResponseError)(error)) {\n                // The response body may contain sensitive information so it is logged separately at the DEBUG level\n                this.log(logging_1.LogLevel.DEBUG, `failed response body`, {\n                    body: error.body,\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Emits a log message to the console.\n     *\n     * @param level The level for this message\n     * @param args Arguments to send to the console\n     */\n    log(level, message, extraInfo) {\n        if ((0, logging_1.logLevelSeverity)(level) >= (0, logging_1.logLevelSeverity)(__classPrivateFieldGet(this, _Client_logLevel, \"f\"))) {\n            __classPrivateFieldGet(this, _Client_logger, \"f\").call(this, level, message, extraInfo);\n        }\n    }\n    /**\n     * Transforms an API key or access token into a headers object suitable for an HTTP request.\n     *\n     * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n     * an empty object\n     *\n     * @param auth API key or access token\n     * @returns headers key-value object\n     */\n    authAsHeaders(auth) {\n        const headers = {};\n        const authHeaderValue = auth !== null && auth !== void 0 ? auth : __classPrivateFieldGet(this, _Client_auth, \"f\");\n        if (authHeaderValue !== undefined) {\n            headers[\"authorization\"] = `Bearer ${authHeaderValue}`;\n        }\n        return headers;\n    }\n}\nexports[\"default\"] = Client;\n_Client_auth = new WeakMap(), _Client_logLevel = new WeakMap(), _Client_logger = new WeakMap(), _Client_prefixUrl = new WeakMap(), _Client_timeoutMs = new WeakMap(), _Client_notionVersion = new WeakMap(), _Client_fetch = new WeakMap(), _Client_agent = new WeakMap(), _Client_userAgent = new WeakMap();\nClient.defaultNotionVersion = \"2022-06-28\";\n//# sourceMappingURL=Client.js.map\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/src/Client.js?");

/***/ }),

/***/ "./node_modules/@notionhq/client/build/src/api-endpoints.js":
/*!******************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/api-endpoints.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n// cspell:disable-file\n// Note: This is a generated file.\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.oauthToken = exports.listComments = exports.createComment = exports.search = exports.createDatabase = exports.listDatabases = exports.queryDatabase = exports.updateDatabase = exports.getDatabase = exports.appendBlockChildren = exports.listBlockChildren = exports.deleteBlock = exports.updateBlock = exports.getBlock = exports.getPageProperty = exports.updatePage = exports.getPage = exports.createPage = exports.listUsers = exports.getUser = exports.getSelf = void 0;\nexports.getSelf = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [],\n    path: () => `users/me`,\n};\nexports.getUser = {\n    method: \"get\",\n    pathParams: [\"user_id\"],\n    queryParams: [],\n    bodyParams: [],\n    path: (p) => `users/${p.user_id}`,\n};\nexports.listUsers = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [\"start_cursor\", \"page_size\"],\n    bodyParams: [],\n    path: () => `users`,\n};\nexports.createPage = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\"parent\", \"properties\", \"icon\", \"cover\", \"content\", \"children\"],\n    path: () => `pages`,\n};\nexports.getPage = {\n    method: \"get\",\n    pathParams: [\"page_id\"],\n    queryParams: [\"filter_properties\"],\n    bodyParams: [],\n    path: (p) => `pages/${p.page_id}`,\n};\nexports.updatePage = {\n    method: \"patch\",\n    pathParams: [\"page_id\"],\n    queryParams: [],\n    bodyParams: [\"properties\", \"icon\", \"cover\", \"archived\"],\n    path: (p) => `pages/${p.page_id}`,\n};\nexports.getPageProperty = {\n    method: \"get\",\n    pathParams: [\"page_id\", \"property_id\"],\n    queryParams: [\"start_cursor\", \"page_size\"],\n    bodyParams: [],\n    path: (p) => `pages/${p.page_id}/properties/${p.property_id}`,\n};\nexports.getBlock = {\n    method: \"get\",\n    pathParams: [\"block_id\"],\n    queryParams: [],\n    bodyParams: [],\n    path: (p) => `blocks/${p.block_id}`,\n};\nexports.updateBlock = {\n    method: \"patch\",\n    pathParams: [\"block_id\"],\n    queryParams: [],\n    bodyParams: [\n        \"embed\",\n        \"type\",\n        \"archived\",\n        \"bookmark\",\n        \"image\",\n        \"video\",\n        \"pdf\",\n        \"file\",\n        \"audio\",\n        \"code\",\n        \"equation\",\n        \"divider\",\n        \"breadcrumb\",\n        \"table_of_contents\",\n        \"link_to_page\",\n        \"table_row\",\n        \"heading_1\",\n        \"heading_2\",\n        \"heading_3\",\n        \"paragraph\",\n        \"bulleted_list_item\",\n        \"numbered_list_item\",\n        \"quote\",\n        \"to_do\",\n        \"toggle\",\n        \"template\",\n        \"callout\",\n        \"synced_block\",\n        \"table\",\n    ],\n    path: (p) => `blocks/${p.block_id}`,\n};\nexports.deleteBlock = {\n    method: \"delete\",\n    pathParams: [\"block_id\"],\n    queryParams: [],\n    bodyParams: [],\n    path: (p) => `blocks/${p.block_id}`,\n};\nexports.listBlockChildren = {\n    method: \"get\",\n    pathParams: [\"block_id\"],\n    queryParams: [\"start_cursor\", \"page_size\"],\n    bodyParams: [],\n    path: (p) => `blocks/${p.block_id}/children`,\n};\nexports.appendBlockChildren = {\n    method: \"patch\",\n    pathParams: [\"block_id\"],\n    queryParams: [],\n    bodyParams: [\"children\", \"after\"],\n    path: (p) => `blocks/${p.block_id}/children`,\n};\nexports.getDatabase = {\n    method: \"get\",\n    pathParams: [\"database_id\"],\n    queryParams: [],\n    bodyParams: [],\n    path: (p) => `databases/${p.database_id}`,\n};\nexports.updateDatabase = {\n    method: \"patch\",\n    pathParams: [\"database_id\"],\n    queryParams: [],\n    bodyParams: [\n        \"title\",\n        \"description\",\n        \"icon\",\n        \"cover\",\n        \"properties\",\n        \"is_inline\",\n        \"archived\",\n    ],\n    path: (p) => `databases/${p.database_id}`,\n};\nexports.queryDatabase = {\n    method: \"post\",\n    pathParams: [\"database_id\"],\n    queryParams: [\"filter_properties\"],\n    bodyParams: [\"sorts\", \"filter\", \"start_cursor\", \"page_size\", \"archived\"],\n    path: (p) => `databases/${p.database_id}/query`,\n};\nexports.listDatabases = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [\"start_cursor\", \"page_size\"],\n    bodyParams: [],\n    path: () => `databases`,\n};\nexports.createDatabase = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\n        \"parent\",\n        \"properties\",\n        \"icon\",\n        \"cover\",\n        \"title\",\n        \"description\",\n        \"is_inline\",\n    ],\n    path: () => `databases`,\n};\nexports.search = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\"sort\", \"query\", \"start_cursor\", \"page_size\", \"filter\"],\n    path: () => `search`,\n};\nexports.createComment = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\"parent\", \"rich_text\", \"discussion_id\"],\n    path: () => `comments`,\n};\nexports.listComments = {\n    method: \"get\",\n    pathParams: [],\n    queryParams: [\"block_id\", \"start_cursor\", \"page_size\"],\n    bodyParams: [],\n    path: () => `comments`,\n};\nexports.oauthToken = {\n    method: \"post\",\n    pathParams: [],\n    queryParams: [],\n    bodyParams: [\"grant_type\", \"code\", \"redirect_uri\", \"external_account\"],\n    path: () => `oauth/token`,\n};\n//# sourceMappingURL=api-endpoints.js.map\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/src/api-endpoints.js?");

/***/ }),

/***/ "./node_modules/@notionhq/client/build/src/errors.js":
/*!***********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/errors.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.buildRequestError = exports.APIResponseError = exports.UnknownHTTPResponseError = exports.isHTTPResponseError = exports.RequestTimeoutError = exports.isNotionClientError = exports.ClientErrorCode = exports.APIErrorCode = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@notionhq/client/build/src/utils.js\");\n/**\n * Error codes returned in responses from the API.\n */\nvar APIErrorCode;\n(function (APIErrorCode) {\n    APIErrorCode[\"Unauthorized\"] = \"unauthorized\";\n    APIErrorCode[\"RestrictedResource\"] = \"restricted_resource\";\n    APIErrorCode[\"ObjectNotFound\"] = \"object_not_found\";\n    APIErrorCode[\"RateLimited\"] = \"rate_limited\";\n    APIErrorCode[\"InvalidJSON\"] = \"invalid_json\";\n    APIErrorCode[\"InvalidRequestURL\"] = \"invalid_request_url\";\n    APIErrorCode[\"InvalidRequest\"] = \"invalid_request\";\n    APIErrorCode[\"ValidationError\"] = \"validation_error\";\n    APIErrorCode[\"ConflictError\"] = \"conflict_error\";\n    APIErrorCode[\"InternalServerError\"] = \"internal_server_error\";\n    APIErrorCode[\"ServiceUnavailable\"] = \"service_unavailable\";\n})(APIErrorCode = exports.APIErrorCode || (exports.APIErrorCode = {}));\n/**\n * Error codes generated for client errors.\n */\nvar ClientErrorCode;\n(function (ClientErrorCode) {\n    ClientErrorCode[\"RequestTimeout\"] = \"notionhq_client_request_timeout\";\n    ClientErrorCode[\"ResponseError\"] = \"notionhq_client_response_error\";\n})(ClientErrorCode = exports.ClientErrorCode || (exports.ClientErrorCode = {}));\n/**\n * Base error type.\n */\nclass NotionClientErrorBase extends Error {\n}\n/**\n * @param error any value, usually a caught error.\n * @returns `true` if error is a `NotionClientError`.\n */\nfunction isNotionClientError(error) {\n    return (0, utils_1.isObject)(error) && error instanceof NotionClientErrorBase;\n}\nexports.isNotionClientError = isNotionClientError;\n/**\n * Narrows down the types of a NotionClientError.\n * @param error any value, usually a caught error.\n * @param codes an object mapping from possible error codes to `true`\n * @returns `true` if error is a `NotionClientError` with a code in `codes`.\n */\nfunction isNotionClientErrorWithCode(error, codes) {\n    return isNotionClientError(error) && error.code in codes;\n}\n/**\n * Error thrown by the client if a request times out.\n */\nclass RequestTimeoutError extends NotionClientErrorBase {\n    constructor(message = \"Request to Notion API has timed out\") {\n        super(message);\n        this.code = ClientErrorCode.RequestTimeout;\n        this.name = \"RequestTimeoutError\";\n    }\n    static isRequestTimeoutError(error) {\n        return isNotionClientErrorWithCode(error, {\n            [ClientErrorCode.RequestTimeout]: true,\n        });\n    }\n    static rejectAfterTimeout(promise, timeoutMS) {\n        return new Promise((resolve, reject) => {\n            const timeoutId = setTimeout(() => {\n                reject(new RequestTimeoutError());\n            }, timeoutMS);\n            promise\n                .then(resolve)\n                .catch(reject)\n                .then(() => clearTimeout(timeoutId));\n        });\n    }\n}\nexports.RequestTimeoutError = RequestTimeoutError;\nclass HTTPResponseError extends NotionClientErrorBase {\n    constructor(args) {\n        super(args.message);\n        this.name = \"HTTPResponseError\";\n        const { code, status, headers, rawBodyText } = args;\n        this.code = code;\n        this.status = status;\n        this.headers = headers;\n        this.body = rawBodyText;\n    }\n}\nconst httpResponseErrorCodes = {\n    [ClientErrorCode.ResponseError]: true,\n    [APIErrorCode.Unauthorized]: true,\n    [APIErrorCode.RestrictedResource]: true,\n    [APIErrorCode.ObjectNotFound]: true,\n    [APIErrorCode.RateLimited]: true,\n    [APIErrorCode.InvalidJSON]: true,\n    [APIErrorCode.InvalidRequestURL]: true,\n    [APIErrorCode.InvalidRequest]: true,\n    [APIErrorCode.ValidationError]: true,\n    [APIErrorCode.ConflictError]: true,\n    [APIErrorCode.InternalServerError]: true,\n    [APIErrorCode.ServiceUnavailable]: true,\n};\nfunction isHTTPResponseError(error) {\n    if (!isNotionClientErrorWithCode(error, httpResponseErrorCodes)) {\n        return false;\n    }\n    return true;\n}\nexports.isHTTPResponseError = isHTTPResponseError;\n/**\n * Error thrown if an API call responds with an unknown error code, or does not respond with\n * a property-formatted error.\n */\nclass UnknownHTTPResponseError extends HTTPResponseError {\n    constructor(args) {\n        var _a;\n        super({\n            ...args,\n            code: ClientErrorCode.ResponseError,\n            message: (_a = args.message) !== null && _a !== void 0 ? _a : `Request to Notion API failed with status: ${args.status}`,\n        });\n        this.name = \"UnknownHTTPResponseError\";\n    }\n    static isUnknownHTTPResponseError(error) {\n        return isNotionClientErrorWithCode(error, {\n            [ClientErrorCode.ResponseError]: true,\n        });\n    }\n}\nexports.UnknownHTTPResponseError = UnknownHTTPResponseError;\nconst apiErrorCodes = {\n    [APIErrorCode.Unauthorized]: true,\n    [APIErrorCode.RestrictedResource]: true,\n    [APIErrorCode.ObjectNotFound]: true,\n    [APIErrorCode.RateLimited]: true,\n    [APIErrorCode.InvalidJSON]: true,\n    [APIErrorCode.InvalidRequestURL]: true,\n    [APIErrorCode.InvalidRequest]: true,\n    [APIErrorCode.ValidationError]: true,\n    [APIErrorCode.ConflictError]: true,\n    [APIErrorCode.InternalServerError]: true,\n    [APIErrorCode.ServiceUnavailable]: true,\n};\n/**\n * A response from the API indicating a problem.\n * Use the `code` property to handle various kinds of errors. All its possible values are in `APIErrorCode`.\n */\nclass APIResponseError extends HTTPResponseError {\n    constructor() {\n        super(...arguments);\n        this.name = \"APIResponseError\";\n    }\n    static isAPIResponseError(error) {\n        return isNotionClientErrorWithCode(error, apiErrorCodes);\n    }\n}\nexports.APIResponseError = APIResponseError;\nfunction buildRequestError(response, bodyText) {\n    const apiErrorResponseBody = parseAPIErrorResponseBody(bodyText);\n    if (apiErrorResponseBody !== undefined) {\n        return new APIResponseError({\n            code: apiErrorResponseBody.code,\n            message: apiErrorResponseBody.message,\n            headers: response.headers,\n            status: response.status,\n            rawBodyText: bodyText,\n        });\n    }\n    return new UnknownHTTPResponseError({\n        message: undefined,\n        headers: response.headers,\n        status: response.status,\n        rawBodyText: bodyText,\n    });\n}\nexports.buildRequestError = buildRequestError;\nfunction parseAPIErrorResponseBody(body) {\n    if (typeof body !== \"string\") {\n        return;\n    }\n    let parsed;\n    try {\n        parsed = JSON.parse(body);\n    }\n    catch (parseError) {\n        return;\n    }\n    if (!(0, utils_1.isObject)(parsed) ||\n        typeof parsed[\"message\"] !== \"string\" ||\n        !isAPIErrorCode(parsed[\"code\"])) {\n        return;\n    }\n    return {\n        ...parsed,\n        code: parsed[\"code\"],\n        message: parsed[\"message\"],\n    };\n}\nfunction isAPIErrorCode(code) {\n    return typeof code === \"string\" && code in apiErrorCodes;\n}\n//# sourceMappingURL=errors.js.map\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/src/errors.js?");

/***/ }),

/***/ "./node_modules/@notionhq/client/build/src/helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isFullComment = exports.isFullUser = exports.isFullPageOrDatabase = exports.isFullDatabase = exports.isFullPage = exports.isFullBlock = exports.collectPaginatedAPI = exports.iteratePaginatedAPI = void 0;\n/**\n * Returns an async iterator over the results of any paginated Notion API.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * for await (const block of iteratePaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })) {\n *   // Do something with block.\n * }\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */\nasync function* iteratePaginatedAPI(listFn, firstPageArgs) {\n    let nextCursor = firstPageArgs.start_cursor;\n    do {\n        const response = await listFn({\n            ...firstPageArgs,\n            start_cursor: nextCursor,\n        });\n        yield* response.results;\n        nextCursor = response.next_cursor;\n    } while (nextCursor);\n}\nexports.iteratePaginatedAPI = iteratePaginatedAPI;\n/**\n * Collect all of the results of paginating an API into an in-memory array.\n *\n * Example (given a notion Client called `notion`):\n *\n * ```\n * const blocks = await collectPaginatedAPI(notion.blocks.children.list, {\n *   block_id: parentBlockId,\n * })\n * // Do something with blocks.\n * ```\n *\n * @param listFn A bound function on the Notion client that represents a conforming paginated\n *   API. Example: `notion.blocks.children.list`.\n * @param firstPageArgs Arguments that should be passed to the API on the first and subsequent\n *   calls to the API. Any necessary `next_cursor` will be automatically populated by\n *   this function. Example: `{ block_id: \"<my block id>\" }`\n */\nasync function collectPaginatedAPI(listFn, firstPageArgs) {\n    const results = [];\n    for await (const item of iteratePaginatedAPI(listFn, firstPageArgs)) {\n        results.push(item);\n    }\n    return results;\n}\nexports.collectPaginatedAPI = collectPaginatedAPI;\n/**\n * @returns `true` if `response` is a full `BlockObjectResponse`.\n */\nfunction isFullBlock(response) {\n    return \"type\" in response;\n}\nexports.isFullBlock = isFullBlock;\n/**\n * @returns `true` if `response` is a full `PageObjectResponse`.\n */\nfunction isFullPage(response) {\n    return \"url\" in response;\n}\nexports.isFullPage = isFullPage;\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse`.\n */\nfunction isFullDatabase(response) {\n    return \"title\" in response;\n}\nexports.isFullDatabase = isFullDatabase;\n/**\n * @returns `true` if `response` is a full `DatabaseObjectResponse` or a full\n * `PageObjectResponse`.\n */\nfunction isFullPageOrDatabase(response) {\n    if (response.object === \"database\") {\n        return isFullDatabase(response);\n    }\n    else {\n        return isFullPage(response);\n    }\n}\nexports.isFullPageOrDatabase = isFullPageOrDatabase;\n/**\n * @returns `true` if `response` is a full `UserObjectResponse`.\n */\nfunction isFullUser(response) {\n    return \"type\" in response;\n}\nexports.isFullUser = isFullUser;\n/**\n * @returns `true` if `response` is a full `CommentObjectResponse`.\n */\nfunction isFullComment(response) {\n    return \"created_by\" in response;\n}\nexports.isFullComment = isFullComment;\n//# sourceMappingURL=helpers.js.map\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/src/helpers.js?");

/***/ }),

/***/ "./node_modules/@notionhq/client/build/src/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isFullPageOrDatabase = exports.isFullComment = exports.isFullUser = exports.isFullPage = exports.isFullDatabase = exports.isFullBlock = exports.iteratePaginatedAPI = exports.collectPaginatedAPI = exports.isNotionClientError = exports.RequestTimeoutError = exports.UnknownHTTPResponseError = exports.APIResponseError = exports.ClientErrorCode = exports.APIErrorCode = exports.LogLevel = exports.Client = void 0;\nvar Client_1 = __webpack_require__(/*! ./Client */ \"./node_modules/@notionhq/client/build/src/Client.js\");\nObject.defineProperty(exports, \"Client\", ({ enumerable: true, get: function () { return Client_1.default; } }));\nvar logging_1 = __webpack_require__(/*! ./logging */ \"./node_modules/@notionhq/client/build/src/logging.js\");\nObject.defineProperty(exports, \"LogLevel\", ({ enumerable: true, get: function () { return logging_1.LogLevel; } }));\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@notionhq/client/build/src/errors.js\");\nObject.defineProperty(exports, \"APIErrorCode\", ({ enumerable: true, get: function () { return errors_1.APIErrorCode; } }));\nObject.defineProperty(exports, \"ClientErrorCode\", ({ enumerable: true, get: function () { return errors_1.ClientErrorCode; } }));\nObject.defineProperty(exports, \"APIResponseError\", ({ enumerable: true, get: function () { return errors_1.APIResponseError; } }));\nObject.defineProperty(exports, \"UnknownHTTPResponseError\", ({ enumerable: true, get: function () { return errors_1.UnknownHTTPResponseError; } }));\nObject.defineProperty(exports, \"RequestTimeoutError\", ({ enumerable: true, get: function () { return errors_1.RequestTimeoutError; } }));\n// Error helpers\nObject.defineProperty(exports, \"isNotionClientError\", ({ enumerable: true, get: function () { return errors_1.isNotionClientError; } }));\nvar helpers_1 = __webpack_require__(/*! ./helpers */ \"./node_modules/@notionhq/client/build/src/helpers.js\");\nObject.defineProperty(exports, \"collectPaginatedAPI\", ({ enumerable: true, get: function () { return helpers_1.collectPaginatedAPI; } }));\nObject.defineProperty(exports, \"iteratePaginatedAPI\", ({ enumerable: true, get: function () { return helpers_1.iteratePaginatedAPI; } }));\nObject.defineProperty(exports, \"isFullBlock\", ({ enumerable: true, get: function () { return helpers_1.isFullBlock; } }));\nObject.defineProperty(exports, \"isFullDatabase\", ({ enumerable: true, get: function () { return helpers_1.isFullDatabase; } }));\nObject.defineProperty(exports, \"isFullPage\", ({ enumerable: true, get: function () { return helpers_1.isFullPage; } }));\nObject.defineProperty(exports, \"isFullUser\", ({ enumerable: true, get: function () { return helpers_1.isFullUser; } }));\nObject.defineProperty(exports, \"isFullComment\", ({ enumerable: true, get: function () { return helpers_1.isFullComment; } }));\nObject.defineProperty(exports, \"isFullPageOrDatabase\", ({ enumerable: true, get: function () { return helpers_1.isFullPageOrDatabase; } }));\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/src/index.js?");

/***/ }),

/***/ "./node_modules/@notionhq/client/build/src/logging.js":
/*!************************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/logging.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.logLevelSeverity = exports.makeConsoleLogger = exports.LogLevel = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/@notionhq/client/build/src/utils.js\");\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\nfunction makeConsoleLogger(name) {\n    return (level, message, extraInfo) => {\n        console[level](`${name} ${level}:`, message, extraInfo);\n    };\n}\nexports.makeConsoleLogger = makeConsoleLogger;\n/**\n * Transforms a log level into a comparable (numerical) value ordered by severity.\n */\nfunction logLevelSeverity(level) {\n    switch (level) {\n        case LogLevel.DEBUG:\n            return 20;\n        case LogLevel.INFO:\n            return 40;\n        case LogLevel.WARN:\n            return 60;\n        case LogLevel.ERROR:\n            return 80;\n        default:\n            return (0, utils_1.assertNever)(level);\n    }\n}\nexports.logLevelSeverity = logLevelSeverity;\n//# sourceMappingURL=logging.js.map\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/src/logging.js?");

/***/ }),

/***/ "./node_modules/@notionhq/client/build/src/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/src/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isObject = exports.pick = exports.assertNever = void 0;\n/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param value The variable with no remaining values\n */\nfunction assertNever(value) {\n    throw new Error(`Unexpected value should never occur: ${value}`);\n}\nexports.assertNever = assertNever;\nfunction pick(base, keys) {\n    const entries = keys.map(key => [key, base === null || base === void 0 ? void 0 : base[key]]);\n    return Object.fromEntries(entries);\n}\nexports.pick = pick;\nfunction isObject(o) {\n    return typeof o === \"object\" && o !== null;\n}\nexports.isObject = isObject;\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/src/utils.js?");

/***/ }),

/***/ "./node_modules/node-fetch/browser.js":
/*!********************************************!*\
  !*** ./node_modules/node-fetch/browser.js ***!
  \********************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof __webpack_require__.g !== 'undefined') { return __webpack_require__.g; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports[\"default\"] = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n\n\n//# sourceURL=webpack://tutor-timings/./node_modules/node-fetch/browser.js?");

/***/ }),

/***/ "./src/fillData.js":
/*!*************************!*\
  !*** ./src/fillData.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makePage: () => (/* binding */ makePage)\n/* harmony export */ });\n/* harmony import */ var _notionhq_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @notionhq/client */ \"./node_modules/@notionhq/client/build/src/index.js\");\n/* harmony import */ var _home_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./home.js */ \"./src/home.js\");\n\r\n\r\n\r\nconst notion = new _notionhq_client__WEBPACK_IMPORTED_MODULE_0__.Client({ auth: \"secret_gFxhy4vsPRkjFrzL8GBVOrISsrpDGwBrHF0t0bIcUig\"  });\r\n\r\nasync function makePage(){\r\n  var databaseId = \"f3b4e539d8a0482eb512457311b0bd75\"\r\n  var name = document.getElementById(\"person-name\").value;\r\n  var email = document.getElementById(\"person-email\").value;\r\n  if (name == \"\" || email == \"\") {\r\n    alert(\"Please enter your name and email!\");\r\n    return;\r\n  }\r\n  const timeData = (0,_home_js__WEBPACK_IMPORTED_MODULE_1__.getTimes)(name, email);\r\n  \r\n  console.log(timeData);\r\n\r\n  const response = await notion.pages.create({\r\n    parent: {\r\n      database_id: databaseId,\r\n    },\r\n    properties: {\r\n      Name: {\r\n        title: [\r\n          {\r\n            text: {\r\n              content: 'AYUSH TEST',\r\n            },\r\n          },\r\n        ],\r\n      },\r\n        Sunday: {\r\n          multi_select: [\r\n            {\r\n              name: \"10:00 AM - 11:00 AM\",\r\n            },\r\n            {\r\n              name: \"11:00 AM - 12:00 PM\",\r\n            }\r\n\r\n          ],\r\n        },\r\n    },\r\n  });\r\n\r\n  return response;\r\n};\r\n\r\n\n\n//# sourceURL=webpack://tutor-timings/./src/fillData.js?");

/***/ }),

/***/ "./src/home.js":
/*!*********************!*\
  !*** ./src/home.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTimes: () => (/* binding */ getTimes)\n/* harmony export */ });\n/* harmony import */ var _fillData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fillData.js */ \"./src/fillData.js\");\n\r\n\r\nvar script = document.createElement('script');\r\ndocument.getElementsByTagName('head')[0].appendChild(script);\r\n\r\nif(document.getElementById('submit') != null) {document.getElementById(\"submit\").addEventListener(\"click\", _fillData_js__WEBPACK_IMPORTED_MODULE_0__.makePage);\r\n}\r\n\r\n/*allow highlighting of each time-slot */\r\n$(document).ready(function() {\r\n  var $box = $('.time-box').mousedown(function() {\r\n    $(this).toggleClass('time-box-highlight');\r\n    var flag = $(this).hasClass('time-box-highlight');\r\n    $box.on('mouseenter.highlight', function() {\r\n      $(this).toggleClass('time-box-highlight', flag);\r\n    });\r\n  });\r\n  $(document).mouseup(function() {\r\n    $box.off('mouseenter.highlight')\r\n  });\r\n});\r\n\r\n/* when the button is pressed, submit the person's availability to a google app scripts project */\r\nfunction getTimes(name, email) {\r\n\r\n  var myObj = {\r\n    name: name,\r\n    email: email,\r\n  };\r\n\r\n  var highlightColor = \"rgb(112, 0, 0)\";\r\n  var baseColor = \"rgb(220,53,69)\";\r\n\r\n  ///// Parse Schedule Data into parsedData(2D array) an array containing an array for each day of the week\r\n  // Each day array contains whether or not the hour is highlighted with a boolean value\r\n  var parsedData = [];\r\n  var cols = document.getElementsByClassName(\"home-container-columns\");\r\n  for (var j = 0; j < cols.length; j++) {\r\n    var column = [];\r\n    var divArray = cols[j].getElementsByTagName(\"div\");\r\n    for (var i = 0; i < divArray.length; i++) {\r\n      var color = window\r\n        .getComputedStyle(divArray[i])\r\n        .getPropertyValue(\"background-color\");\r\n      column.push(color === highlightColor);\r\n    }\r\n    parsedData.push(column);\r\n  } //// END DATA PARSE\r\n\r\n  // Parses JSON data from schedule data\r\n  var currSelected, prevSelected;\r\n  for (var day = 0; day < parsedData.length; day++) {\r\n    var dayData = parsedData[day];\r\n    var jsonHourData = []; // array of {start: hour , end: hour} objects: blocks of time in a day\r\n\r\n    var jsonTime = {};\r\n    var timeString = \"\";\r\n    for (var hour = 0; hour < dayData.length; hour++) {\r\n      currSelected = dayData[hour];\r\n      prevSelected = hour > 0 && dayData[hour - 1];\r\n\r\n      if (currSelected && prevSelected && hour == 23) {\r\n        jsonTime[\"end\"] = hourToMilitary(hour + 1);\r\n      } else if (currSelected && !prevSelected) {\r\n        jsonTime[\"start\"] = hourToMilitary(hour);\r\n        if (hour == 23) {\r\n          jsonTime[\"end\"] = hourToMilitary(hour + 1);\r\n        }\r\n      } else if (!currSelected && prevSelected) {\r\n        jsonTime[\"end\"] = hourToMilitary(hour);\r\n      }\r\n      if (jsonTime[\"end\"] != null) {\r\n        if (jsonTime[\"start\"] < 1200){\r\n          timeString = jsonTime[\"start\"] / 100 + \":00 AM - \"\r\n        }\r\n        else{\r\n          if (jsonTime[\"start\"] / 100 == 12){\r\n            timeString = jsonTime[\"start\"] / 100 + \":00 PM - \"\r\n          }\r\n          else{\r\n            timeString = jsonTime[\"start\"] / 100 - 12 + \":00 PM - \"\r\n          }\r\n        }\r\n        if (jsonTime[\"end\"] < 1200){\r\n          timeString += jsonTime[\"end\"] / 100 + \":00 AM\"\r\n        }\r\n        else{\r\n          if (jsonTime[\"end\"] / 100 == 12){\r\n            timeString += jsonTime[\"end\"] / 100 + \":00 PM\"\r\n          }\r\n          else{\r\n            timeString += jsonTime[\"end\"] / 100 - 12 + \":00 PM\"\r\n          }\r\n        }\r\n        jsonHourData.push(timeString);\r\n        //jsonHourData.push(jsonTime);\r\n        jsonTime = {};\r\n      }\r\n    }\r\n    myObj[getDay(day-1)] = jsonHourData;\r\n  }\r\n  const sundayInput = document.querySelector('input[name=\"Sunday\"]');\r\n  const mondayInput = document.querySelector('input[name=\"Monday\"]');\r\n  const tuesdayInput = document.querySelector('input[name=\"Tuesday\"]');\r\n  const wednesdayInput = document.querySelector('input[name=\"Wednesday\"]');\r\n  const thursdayInput = document.querySelector('input[name=\"Thursday\"]');\r\n  const fridayInput = document.querySelector('input[name=\"Friday\"]');\r\n  const saturdayInput = document.querySelector('input[name=\"Saturday\"]');\r\n  sundayInput.value = JSON.stringify(myObj.sunday);\r\n  mondayInput.value = JSON.stringify(myObj.monday);\r\n  tuesdayInput.value = JSON.stringify(myObj.tuesday);\r\n  wednesdayInput.value = JSON.stringify(myObj.wednesday);\r\n  thursdayInput.value = JSON.stringify(myObj.thursday);\r\n  fridayInput.value = JSON.stringify(myObj.friday);\r\n  saturdayInput.value = JSON.stringify(myObj.saturday);\r\n  return myObj;\r\n  // document.getElementById(\"submitBtn\").click();\r\n\r\n // document.getElementById(\"myForm\").submit();\r\n  sendData(myObj);\r\n}\r\n\r\nfunction hourToMilitary(hour) {\r\n  return hour * 100;\r\n}\r\n\r\nfunction getDay(num) {\r\n  if (num == 0) return \"sunday\";\r\n  if (num == 1) return \"monday\";\r\n  if (num == 2) return \"tuesday\";\r\n  if (num == 3) return \"wednesday\";\r\n  if (num == 4) return \"thursday\";\r\n  if (num == 5) return \"friday\";\r\n  if (num == 6) return \"saturday\";\r\n}\r\n\r\n/* READ\r\n    sendData(data) takes in the *JSON object,\r\n    and is sent to a google apps scripts project thats deployed as a web app via\r\n    a post request with the JSON object in a text form in the body of the request\r\n    The app scripts project is connected to a google sheet which takes in the JSON\r\n    and formats it to the google sheet. \r\n    An nonproduction copy of the google sheet is linked:\r\n    https://docs.google.com/spreadsheets/d/1CP3PBlQuo9TESws-w-PZQgOlwf8OucYV3HLSwrebPsI/edit?usp=sharing\r\n\r\n        App scripts project is in the google sheet under extensions->App scripts\r\n        Instructions for implementing a production copy of the sheet and app script \r\n        is laid out in the app script main file\r\n\r\n    *JSON object in format of:\r\n    name is string\r\n    days of weeks contain arrays of availibity objects\r\n    {\"start\":time, \"end\": time} where time is an integer in the military time format,\r\n    e.g 0000 0100 0230 1230 1545 2130 2400 in IST time zone\r\n    {\r\n        \"name\": \"Christopher Espitia-Alvarez\",\r\n        \"monday\": [\r\n            {\"start\": 830,\r\n            \"end\": 1130}\r\n        ],\r\n        \"sunday\": [\r\n            {\"start\": 1200,\r\n            \"end\": 1500},\r\n            {\"start\": 1800,\r\n            \"end\": 2100}\r\n        ]\r\n    }\r\n*/\r\nfunction sendData(data){\r\n    var url = \"https://script.google.com/macros/s/AKfycbywn01yLknTeaRDIhjGzaXtouNx6Yywx_f34hbIZuIT0bB-SYR8gWkCUNjPbwS9DGW3/exec\"\r\n    //This url is the test google app scripts project, change to the real url when there is a production app scripts made\r\n    console.log(data);\r\n    fetch(url, {\r\n        redirect: \"follow\",\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n            \"Content-Type\": \"text/plain;charset=utf-8\",\r\n        },\r\n        })\r\n}\r\n\r\n\n\n//# sourceURL=webpack://tutor-timings/./src/home.js?");

/***/ }),

/***/ "./node_modules/@notionhq/client/build/package.json":
/*!**********************************************************!*\
  !*** ./node_modules/@notionhq/client/build/package.json ***!
  \**********************************************************/
/***/ ((module) => {

eval("module.exports = JSON.parse('{\"name\":\"@notionhq/client\",\"version\":\"2.2.12\",\"description\":\"A simple and easy to use client for the Notion API\",\"engines\":{\"node\":\">=12\"},\"homepage\":\"https://developers.notion.com/docs/getting-started\",\"bugs\":{\"url\":\"https://github.com/makenotion/notion-sdk-js/issues\"},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/makenotion/notion-sdk-js/\"},\"keywords\":[\"notion\",\"notionapi\",\"rest\",\"notion-api\"],\"main\":\"./build/src\",\"types\":\"./build/src/index.d.ts\",\"scripts\":{\"prepare\":\"npm run build\",\"prepublishOnly\":\"npm run checkLoggedIn && npm run lint && npm run test\",\"build\":\"tsc\",\"prettier\":\"prettier --write .\",\"lint\":\"prettier --check . && eslint . --ext .ts && cspell \\'**/*\\' \",\"test\":\"jest ./test\",\"check-links\":\"git ls-files | grep md$ | xargs -n 1 markdown-link-check\",\"prebuild\":\"npm run clean\",\"clean\":\"rm -rf ./build\",\"checkLoggedIn\":\"./scripts/verifyLoggedIn.sh\"},\"author\":\"\",\"license\":\"MIT\",\"files\":[\"build/package.json\",\"build/src/**\"],\"dependencies\":{\"@types/node-fetch\":\"^2.5.10\",\"node-fetch\":\"^2.6.1\"},\"devDependencies\":{\"@types/jest\":\"^28.1.4\",\"@typescript-eslint/eslint-plugin\":\"^5.39.0\",\"@typescript-eslint/parser\":\"^5.39.0\",\"cspell\":\"^5.4.1\",\"eslint\":\"^7.24.0\",\"jest\":\"^28.1.2\",\"markdown-link-check\":\"^3.8.7\",\"prettier\":\"^2.8.8\",\"ts-jest\":\"^28.0.5\",\"typescript\":\"^4.8.4\"}}');\n\n//# sourceURL=webpack://tutor-timings/./node_modules/@notionhq/client/build/package.json?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/home.js");
/******/ 	
/******/ })()
;